选择器
$('li:first').css('background-color','blue');
$('li:even').css('background-color','blue');
$('li:odd').css('background-color','blue');
$('li:eq(2)').css('background-color','blue');
$('ul li').filter('.box').css('background-color','blue');
$('ul li').not('.box').css('background-color','blue');
$('li').filter('[title=hello]').css('background-color','blue');
//属性选择器
$('div[title]').css('background','red');
$('span[name=s1]').css('background','red');
//表单选择器
//:input :text :password :radio :checkbox :submit :image :reset
//:button :file :hidden
$(':text').css('color','red');
$(':password').css('color','blue');
//表单对象属性
:enabled,:disabled,:checked,:selected
$(':disabled').css('background','red');

方法函数化,jquery下的方法
1，html()
$('#div1').html('<em>em</em>');   //会把id为div1的标签里的内容替换
$('#div1').html('123');           //替换id为div1的标签里的文本内容
$('#div1').html(function(index,value){
	return value+':'+index;     //index为这个id为div1的标签的索引，value为其里面的文本内容
});

2，css()
$('#div1').css('background','red');  //设置值
$('#div1').css('height')   //获取值，带px
$('#div1').css({'background':'red','font-size':'20px'});
$('#div1').css('height',function(index,value){
	return (parseInt(value)+100)+'px';
});
var attrs=$('#div1').css(['width','height']);
for(var i in attrs){
	alert(i+':'+attrs[i]);  //批量获取属性值
}

3，text()
$('#div1').text()
$('#div1').text(function(index,value){
	return value+':'+index;
});
alert($('li').text()); //可以获得li下面所有的文本的值，包括内部标签里面的文本
$('li').text(123);     //赋值时和html一样全部会改变

4,attr(),removeattr()和prop()
$('#div1').attr('class','box');  //设置属性
alert($('#div1').attr('class'));  //获取属性
prop()用于设置checkbox和radio的checked
prop('checked',true);
prop('checked',false);
prop('checked');  //返回true or false

5，filter()与not()是反义词
$('ul li').filter('.red').css('background','red');
$('ul li').not('.red').css('background','red');

6,has()  包含的意思
$('ul').has('.red').css('background','red');  //因为ul中包含class是red的标签，所以会全部变红

7,next()和prev() 下一个和上一个兄弟节点
$('#div1').next().css('background','red');
$('#div1').prev().css('background','red');

8,nextAll(),nextUntil()和prevAll(),prevUntil()
$('#div1').nextAll().css('background','green');
$('#div1').nextUntil('h3').css('background','green');  //下一个标签到h3截止，不包括h3
$('#div1').prevAll().css('background','green');
$('#div1').prevUntil('h2').css('background','red');   //下一个标签到h2截止，不包括h2

9，parent()父类,parents()祖先,parentsUntil()和siblings()所有兄弟节点
$('.red').parent().css('background','blue');  //父节点会变色
$('.red').parents().css('background','blue');  //所有祖先节点会变色，包括body和html
$('.red').parents('#div2').css('background','blue');  //筛选功能，只有祖先节点#div2会变色
$('.red').parentsUntil('body').css('background','red');  //到body标签截止
$('#div1').siblings().css('background','green');      //所有兄弟节点都会变色

10，closest() //获取最近的指定的祖先节点，包括当前元素自身，参数一定要写
$('.red').closest('li').css('background','green');  //自身变色
$('.red').closest('#div2').css('background','green');  //#div2标签变色

11，find()
$('#div2').find('.red').css('background','red');
alert($('#div2').find('p').find('span').text());

12,index()  //获取标签的索引值
alert($('#div2').find('.red').index());

13,addClass,removeClass,hasClass
$('#div1').addClass('box');
$('#div2').removeClass('pox');

14,width,innerWidth,outerWidth,类似的还有height(),innerHeight(),outerHeight()
alert($('#div1').width());
$('#div1').width(function(index,value){
	return value+200+'px';
});
alert($('#div1').innerWidth());  //width+padding
alert($('#div1').outerWidth());  //width+padding+border
alert($('#div1').outerWidth(true)); //width+padding+border+margin
//以上方法即使在div标签隐藏时也可以获取到

15,after,insertAfter和before,insertBefore 外部添加
after和insertAfter功能一样，只是后续操作会有不同
$('input').insertAfter('#div1');   //类似剪切操作，input标签会被剪切到div标签后面
$('#div1').after($('input'));  //div标签后面是input标签
//两者的区别
$('input').insertAfter('#div1').css('background','red');  //input标签变红
$('#div1').after($('input')).css('background','red');     //div标签变红

16，append,appendTo和prepend，prependTo  内部添加
$('input').appendTo($('#div1'));   #input标签添加到div标签内部的后面
$('#div1').append($('input'));  #div内部后面添加input标签
$('input').prependTo($('#div1'));
$('#div1').prepend($('input'));

17,remove()和detach()
remove()会把元素的事件删掉，detach()不会删掉
$('input').click(function(){
	alert(123);
});
$('input').remove().appendTo($('body'));  //事件会被删掉
$('input').detach().appendTo($('body'));  //事件不会被删掉

18,on,off（取消事件）
$('input').on('click mouseover',function(){
	$(this).css('background','red');
	$(this).off('mouseover');
});
$('input').on({
	'click':function(){
		alert(123);
	},
	'mouseover':function(){
		alert(456);
	}
});

19,scrollTop上下滚动条的距离
scrollLeft 左右滚动条的距离
$(window).scrollTop(0);

$(document).click(function(){
	alert($(window).scrollTop());
});

弹窗：
$('input').click(function(){
	var oDiv=$("<div id='div1'><form><p>用户名<input type='text' name='user' /></p><p>密  码<input type='password' name='passwd' /></p><p><input type='submit' value='提交' /></form><div id='close'>X</div></div>");
	$('body').append(oDiv);
	oDiv.css('left',($(window).width()-oDiv.outerWidth())/2);
	oDiv.css('top',($(window).height()-oDiv.outerHeight())/2);
			
	$(window).on('resize scroll',function(){
		oDiv.css('left',($(window).width()-oDiv.outerWidth())/2);
		oDiv.css('top',($(window).height()-oDiv.outerHeight())/2+$(window).scrollTop());
	});
				
	$('#close').click(function(){
		oDiv.css('display','none');
	});
});

20,ev事件
pageX/pageY:鼠标坐标，相对于文档，有滚动条则加上滚动条的距离
clientX/clientY:相对于可视区
$(document).click(function(e){
	//alert(e.pageX+','+e.clientX);
	alert($(window).scrollTop());
	alert(e.pageY+','+e.clientY);  //e.pageY=e.clientY+$(window).scrollTop()
});
e.which  获取键盘按键的编码值
$(document).keydown(function(e){
	alert(e.which);
});
e.altKey
$(document).keydown(function(e){
	alert(e.altKey);  //如果按下ctrl键，则会显示true
});
//如果多个元素重叠在一起，切绑定了同一个事件，就出现了冒泡
$(function(){
	$('#div3').click(function(){
		alert('div3');
	});
	$('#div2').click(function(e){
		alert('div2');
		e.stopPropagation();
	});
	$('#div1').click(function(e){
		alert('div1');
		//e.stopPropagation();
	});
});
$('a').click(function(e){
	alert(123);
	e.preventDefault();  //阻止了继续跳转href设置的url
});
如果是既阻止冒泡，又阻止默认行为，可以联合起来使用
e.stopPropagation()
e.preventDefault()
或者 return false
$('input').click({'name':'cash'},function(e){
	alert(e.data.name);  //传递数据,'cash'
	alert(e.target);	//input
	alert(e.type);		//click
});
			
21,one只执行一次事件,执行完了以后就失效了。
$('input').one('click',function(){
	alert(123);  //
});

22,offset(),position()
offset().left/top  //不管父级有没有定位，都是到浏览器的距离
alert($('#div1').offset().left);
alert($('#div1').offset().top);

position().left/top:定位元素自身left的值
$('#div1').position().left  //如果该元素设置了定位，且设置了left的值，那么这个获得的就是left的值

23,offsetParent()  获取有定位的父级,没有有定位的父级的话，那就获取html
$('#pox').offsetParent().css('background','blue');
$('#div1').offsetParent().css('background','red'); 

24,val(),size(),length
//val用于获取input textarea和select标签的值
alert($('input[name=content]').val());
$('input[name=content]').val(function(index,value){
	return value+'456';
});
alert($('input').size());
alert($('input').length);

25,each循环
$('li').each(function(index,ele){
	$(ele).html(index);  //index为每个li元素的下标索引,ele为每个li元素
});
$('div').each(function(i,ele){
	$(ele).addClass('div'+(i+1));
});

26,拖拽案例:
#div1 {
	width:100px;
	height:100px;
	background:red;
	position:absolute;
}
$('#div1').mousedown(function(e){
	disX=e.pageX-$(this).offset().left;
	disY=e.pageY-$(this).offset().top;
	
	$(document).mousemove(function(e){
		$('#div1').css('left',e.pageX-disX);
		$('#div1').css('top',e.pageY-disY);
	});
	
	$(document).mouseup(function(){
		$(this).off();
	});
	
	return false;
});
点击运动：
$(document).click(function(e){
	$('#div1').css('left',e.pageX);
	$('#div1').css('top',e.pageY);
});

27,hover() 移入移出
$('#div1').hover(function(){
	$(this).css('background','red');
},function(){
	$(this).css('background','green');
});

28,show()和hide()  显示和隐藏
$('#div1').hover(function(){
	$(this).hide(1000);  //里面加时间，时间单位是毫秒
},function(){
	$(this).show(1000);
});

29,fadeIn,fadeOut和fadeTo  淡出淡入
$('#div1').hover(function(){
	$(this).fadeOut(1000);   //淡入
},function(){
	$(this).fadeIn(1000);  //淡出
});
$('#div1').hover(function(){
	$(this).fadeTo(1000,0.3);  //时间和透明度
},function(){
	$(this).fadeTo(1000,1);
});

30,slideDown,slideUp  卷下卷上,可以跟时间
var flag=true;
$('input[type=button]').click(function(){
	if(flag == true){
		$('#div1').slideUp(1000);
		flag=false;
	}else{
		$('#div1').slideDown(1000);
		flag=true;
	}
});

31,get()  //可把JQ转化成原生的js
$('#div1').get(0).innerText='123';  //前面是JQ，经过get转化成js，可以使用innerText
alert($('div').get().length);

32,加载
$(document).ready(function(){}) = $(function(){}) //只需要DOM加载完毕就可以执行了，不需要等待图片，flash等的加载完毕
window.onload=function(){}  等待页面所有内容加载完毕，才会执行
所以$(function(){})的加载时间要比window.onload短

33,clone() 可以加参数true
$('input[type=button]').on('click',function(){
	alert(123);
});
$('input[type=button]').clone().appendTo($('body'));   //不能复制事件的行为
$('input[type=button]').clone(true).appendTo($('body'));  //可以复制事件的行为

34,wrap()包装,wrapAll()整体包装,wrapInner()内部包装和unwrap()删除包装
$('a').wrap('<span>');   //找到a标签，用span标签包装起来
$('div').wrapAll('<div>'); //用div标签把页面所有div标签包装起来，其他标签会被剔除，这样会改变页面的布局
$('h4').wrapInner('<em>');  //会把h4标签里面的文本内容用em标签包装起来
$('#div1').unwrap();  //删除标签

35,add()
var oH4=$('h4');
var oH=oH4.add('h2');
oH.css('color','red');  //h4和h2标签都会变红

36,slice
$('li').slice(1,3).css('background','red');

37,serialize()和serializeArray()
$('form').submit(function(){
	alert($('form').serialize());  返回username=123&passwd=456
});

38,animate() 运动,时间(默认400ms)后面还有一个参数，控制运动的形式，默认swing(慢快慢),linear(匀速)
$('input').click(function(){
	//$('#div1').animate({width:300},1000,function(){
	//	$('#div1').animate({height:300},1000);
	//});
	
	$('#div1').animate({width:300},1000).animate({height:300},1000);
});

39,stop(),finish()立刻停止运动到目标点和delay()延迟
$('.move').click(function(){
	//$('#div1').animate({width:300},1000,function(){
	//	$('#div1').animate({height:300},1000);
	//});
	
	$('#div1').animate({width:300},1000).delay(1000).animate({height:300},1000);
});
$('.end').click(function(){
	//$('#div1').stop();   //只会阻止当前运动，后续运动还会进行
	//$('#div1').stop(true);  //会阻止后续所有运动
	//$('#div1').stop(true,true);  //会立刻停止到当前运动的目标点
	//$('#div1').finish();   //会立即停止到所有运动的目标点
});

40,delegate()和undelegate()
//delegate()事件委托，undelegate()取消事件委托
//$('#div1').delegate('#div2,#div3','click',function(){
//	$('#div1').css('background','red');  //把事件绑定到了#div1上，当点击#div2和#div3时通过冒泡冒到了#div1上
//	$('#div1').undelegate();
//});
$('ul').delegate('.box','click',function(){
	$(this).css('background','green');
});

41,trigger()主动触发
$('.move').click(function(){
	$('#div1').animate({width:300},1000).delay(1000).animate({height:300},1000);
});
$('.move').trigger('click');  //刷新页面时就会执行

42,工具方法
$.type(),$.trim(),$.inArray()查找元素在数组的索引,$.proxy()改变this指向
var str='  cash   ';
alert($.type(str));  //相比原生的可以判断出更多的类型
alert('('+$.trim(str)+')')
var arr=['a','b','c','d'];
alert($.inArray('e',arr));  //-1
alert($.inArray('a',arr));  //0
function change(arg1,arg2){
	$(this).html(arg1+arg2);
}
$('.move').click($.proxy(change,$('#div3'),3,4));  //改变this指向为$('#div3')
$('.move').click($.proxy(change,$('#div3'))(3,4));  //这样放一刷新就会执行

43，noConflict()避免当$被使用的时候，$=jquery
var cash=$.noConflict();   //这样cash就可以替代$了
cash('#div3').click(function(){
	alert(cash(this).html());
});

44,$.proxyJSON()将格式完好的json字符串转化为真正的json格式的数据
var j1='{"name":"cash","age":28}';  //属性名称和属性值必须用双引号
alert($.parseJSON(j1).name);
$.each($.parseJSON(j1),function(k,v){
	alert(k+':'+v);   //name:cash,age:28
});

45,$.makeArray()将类数组转化为数组
var span=$.makeArray($('span'));
for(var i in span){
	alert($(span[i]).text());
}
46,扩展插件
$.extend():扩展工具方法下的插件形式 $.xxx(),$.yyy()
$.fn.extend:扩展到JQ对象下的插件形式 $.().xxx() $().yyy()
$.extend({
	//消除左边的空格
	leftTrim:function(str){
		return str.replace(/^\s+/,'');
	},
	rightTrim:function(){
	
	},
});
$.fn.extend({
	//拖拽
	drag:function(e){
		
		$(this).mousedown(function(e){
			var disX=e.pageX-$(this).offset().left;
			var disY=e.pageY-$(this).offset().top;
			var that=$(this);
			
			$(document).mousemove(function(e){
				that.css('left',e.pageX-disX);
				that.css('top',e.pageY-disY);
			});
		
			$(document).mouseup(function(){
				$(this).off()
			});
			
			return false;
		});
	},
	bbb:function(){
		alert('bbb');
	},
	//变色
	changeColor:function(obj){
		obj.toggleClass(function(){
			if ($(this).hasClass('red')){
				$(this).removeClass('red');
				return 'green';
			}
			if ($(this).hasClass('green')){
				$(this).removeClass('green');
				return 'red';
			}
		});
	},
	//运动
	change:function(obj){
		obj.animate({'width':300},1000,function(){
			obj.animate({'height':300},1000);
		});
	},
})
//var str='   hello ';
//alert('('+$.leftTrim(str)+')');
//$('#div1').drag();
$('input').click(function(){
	//$(this).changeColor($('#div1'));
	$(this).change($('#div1'));
});

47,ajax:
//jQuery采用了三层封装
//最底层：$.ajax()
//第二层:.load()属于局部方法,$.get()和$.post()是全局方法
//最高层:$.getScript和$.getJSON()

//xxx.load() 两种提交方式:get和post
$('input').click(function(){
	$('#div1').load('test.html');
	$('#div1').load('test.html .url');  //过滤test.html中含有class是url的内容
});
$('input').click(function(){
	$('#div1').load('test.php?url=qq');       //通过get方式传递数据
	$('#div1').load('test.php',{url:'qq'});   //通过post方式传递数据
	$('#div1').load('test.php',{url:'qq'},function(response,status,xhr){
		alert(response+','+status+','+xhr.statusText);  
		other,success,ok,   response:返回的内容,status:状态,statusText:状态码
	});
});

//.load()方法适合做静态文件的异步获取，而对于需要传递到服务器页面的$.get()和$.post()更适合
$('input').click(function(){
	$.post('test.php',{'url':'163'},function(response,status,xhr){
		if(status=='success'){
			$('#div1').html(response);
		};
	});
	$.get('test.php',{'url':'163'},function(response,status,xhr){
		if(status=='success'){
			$('#div1').html(response);
		};
	});
	$.get('test.php?url=163',function(response,status,xhr){
		if(status=='success'){
			$('#div1').html(response);
		};
	});
	//xml格式
	$('input').click(function(){
		$.get('test.xml',function(response,status,xhr){
			$('#div1').html($(response).find('root').find('url'));
		});
	});
});
test.xml:
<?xml version='1.0' ?>
<root>
	<url>www.163.com</url>
</root>

$.getScript 用于加载特定的js文件
$.getJSON   专门用于加载json文件
$('input').click(function(){
	$.getScript('test.js');
	$.getJSON('1.json',function(response,status,xhr){
		alert(response[0].url);
	});
});

//$.ajax()最底层的方法
$('input').click(function(){
	$.ajax({
		type:'POST',
		url:'test.php',
		data:{
			'url':'163',
		},
		success:function(response,status,xhr){
			$('#div1').html(response);
		}
	});
});

$('input').click(function(){
	$.ajax({
		type:'POST',
		url:'test.php',
		data:$('form').serialize(),  //表单序列化，会智能的获取表单里面的所有元素
		success:function(response,status,xhr){
			$('#div1').html(response);
		}	
	})
});

//左侧菜单栏案例
<style>
	.hide{
		display:none;
	}
</style>
<div>
	<div onclick="change(this);">菜单一</div>
	<div class='content'>
		<div>1</div>
		<div>2</div>
		<div>3</div>
	</div>
</div>
<div>
	<div onclick="change(this);">菜单二</div>
	<div class='content hide'>
		<div>11</div>
		<div>22</div>
		<div>33</div>
	</div>
</div>
<div>
	<div onclick="change(this);">菜单三</div>
	<div class='content hide'>
		<div>111</div>
		<div>222</div>
		<div>333</div>
	</div>
</div>
<script type='text/javascript' src='jquery-1.10.1.js'>
</script>
<script>
	function change(arg){
		$(arg).next().removeClass('hide');
		$(arg).parent().siblings().find('.content').addClass('hide');
	};
</script>

48,map
//map循环多个标签中的每一个标签，每一个标签循环时都会执行map内部的函数并得到一个返回值，所有返回值会被封装到一个数组(列表)中,最后返回列表
var list=$('li').map(function(){
	return $(this).text();
});
console.log(list[0],list[1],list[2],list[3]);

49,全选，反选和取消示例
html代码：
<input type='button' value='全选' onclick='SelectAll()' />
<input type='button' value='反选' onclick='Reverse()' />
<input type='button' value='取消' onclick='Cancel()' />
<table>
	<tr><td>网络</td><td><input type='checkbox' /></td></tr>
	<tr><td>音乐</td><td><input type='checkbox' /></td></tr>
	<tr><td>体育</td><td><input type='checkbox' /></td></tr>
	<tr><td>阅读</td><td><input type='checkbox' /></td></tr>
</table>


js代码：
function SelectAll(){
	$('table').find('input:checkbox').prop('checked',true);
}
function Reverse(){
	$('table').find('input:checkbox').each(function(){
		if($(this).prop('checked')){
			$(this).prop('checked',false);
		} else {
			$(this).prop('checked',true);
		}
	});
}
function Cancel(){
	$('table').find('input:checkbox').prop('checked',false);
}

50，修改编辑框
html代码：
<table border='1'>
<tr><th>主机名</th><th>IP</th><th>端口</th><th>操作</th></tr>
<tr><td>1</td><td>2</td><td>3</td><td onclick="edit(this)" class='edit'>编辑</td></tr>
<tr><td>11</td><td>22</td><td>33</td><td onclick="edit(this)" class='edit'>编辑</td></tr>
<tr><td>111</td><td>222</td><td>333</td><td onclick="edit(this)" class='edit'>编辑</td></tr>
<tr><td>1111</td><td>222</td><td>3333</td><td onclick="edit(this)" class='edit'>编辑</td></tr>
</table>
<div id='div1' class='hide'>
	<form>
		<p>主机名:<input type='text' id='hostname' onblur="check(this)" name='hostname' /><span class='tips1'></span></p>
		<p>IP:<input type='text' id='ip' onblur="check(this)" name='ip' /><span class='tips2'></span></p>
		<p>端口:<input type='text' id='port' onblur="check(this)" name='port' /><span class='tip3'></span></p>
		<p><input type='submit' value='提交' onclick='return SubmitForm()'/><input type='button' value='取消' /></p>
	</form>
</div>
css代码：
.hide{
	display:none;
}
#div1{
	width:460px;
	height:200px;
	border:1px solid #ccc;
	position:fixed;
	left:50%;
	top:50%;
	margin-left:-230px;
	margin-top:-100px;
}
js代码：
function edit(obj){
	var all_td=$(obj).prevAll();
	var list=[];
	$.each(all_td,function(i,ele){
		list.unshift($(ele).text());
	});
	$('#hostname').val(list[0]);
	$('#ip').val(list[1]);
	$('#port').val(list[2]);
	$('#div1').removeClass('hide');
	$(':button').click(function(){
		$('#div1').addClass('hide');
	});
}
function check(obj){
	if ($.trim($(obj).val()) == ''){
		$(obj).next().html('<strong style="color:red">This field is required</strong>');
	} else {
		$(obj).next().html('');
	}
}
function SubmitForm(){
	var ret=true;
	
	$(':text').each(function(){
		if($.trim($(this).val()).length == 0){
			$(this).css('border-color','red');
			ret=false;
		}else{
			$(this).css('border-color','green');
		}
	});
	return ret;	
}

51，滚动章节示例
<html>
<head>
	<meta http-equiv="content-type" content="text/html;charset=utf-8">
	<title>JQ</title>
	<style>
		* {
			padding:0;
			margin:0;
		}
		.menu{
			width:200px;
			height:2030px;
			position:fixed;
			background:#ccc;
			top:0;
			left:0;
			bottom:0;
		}
		.content{
			height:2030px;
			position:absolute;
			top:0;
			right:0;
			left:200px;
			bottom:0;
			background:grey;
		}
		.red {
			background:red;
		}
	</style>
</head>
<body>
	<div class='menu'>
		<div>第一章</div>
		<div>第二章</div>
		<div>第三章</div>
	</div>
	<div class='content'>
		<div style='height:500px'>第一章</div>
		<div style='height:1500px'>第二章</div>
		<div style='height:30px'>第三章</div>
	</div>
	<script type='text/javascript' src='jquery-1.10.1.js'>
	</script>
	<script>
		$(window).scroll(function(){
			var list=[];
			$('.content').find('div').each(function(){
				var top1=$(this).offset().top;
				list.push(top1);
			});
			//$(window).height  窗口的高度
			//$(document).height  文档的高度
			//当出现最后一章过短的情况时，要进行判断
			if($(window).scrollTop()+$(window).height() == $(document).height()){
				$('.menu').find('div').removeClass('red');
				$('.menu').find('div').last().addClass('red');
			} else {
				$.each(list,function(i){
					if($(window).scrollTop()>list[i]){
						$('.menu').find('div').removeClass('red');
						$('.menu').find('div').eq(i).addClass('red');
					}
				});
			}
		})
	</script>
</body>
</html>

52,ajax本地和跨域操作
//本地
$(':button').click(function(){
	$.ajax({
		type:'post',
		url:'./test.php',
		data:{'name':'cash'},
		success:function(response){
			$('#div1').html(response);
		},
		error:function(xhr,errorType,errorText){
			alert(errorType+':'+errorText);
		},
	});
})
//跨域
$(':button').click(function(){
	$.ajax({
		type:'get',
		url:'http://ys231.pc.50bang.org/test3.php?name=cash&age=28&callback=?',
		//data:{
		//	'name':'cash',
		//	'age':28,
		//},
		dataType:'jsonp',
		//jsonp:'callback', //或者在url里面加callback=?
		success:function(response){
			//$('#div1').html(response.username+':'+response.age);
			$('#div1').html(response);
			//console.log(response.username);
		},
		error:function(errorType,errorText){
			alert(errorType+':'+errorText);
		}
	})
});

test3.php
if($_GET){
	$arr=array(
			'username'=>$_GET['name'],
			'age'=>$_GET['age'],
	);
	#echo $_GET['callback'].'('.json_encode($arr).')';
	echo $_GET['callback'].'("hello world")';
}

返回值要是json串
格式必须是：String jsonString =
callbackparam + "([{'key':'value'}])" 这种形式。

53,增加删除标签
<div id='div1'>
	<div>
		<span onclick='addCondition(this)'>+</span><input type='text' />
	</div>
</div>
<script type='text/javascript' src='jquery-1.10.1.js'>
</script>
<script>
	function addCondition(obj){
		var cp=$(obj).parent().clone();
		$('#div1').append(cp);
		//将'+'变成'-',并增加onclick事件(点击删除标签)
		cp.children().first().text('-').attr('onclick','removeCondition(this)');
	}
	
	function removeCondition(obj){
		$(obj).parent().remove();
	}
</script>

54,自执行函数
插件一般写成这种形式
(function(arg){
	arg.extend({   //$.extend插件形式
		"cash":function(){
			return 123;
		}	
	});
})(jQuery)

55，表单在提交前加一个click事件来判断，提交本身自带一个submit事件
提交前先进行验证，验证失败的话，则返回false不进行提交
可以把注册，登陆，验证都做成一个事件
$('form').find(':text,:password').each();

56，正则表达式
var reg=/^1[3|5|8]\d{9}$/;
if(!reg.test(val)){}   //通过test方法跟reg表达式进行对比
在each中return只能退出当前的each循环，不再执行each循环了，因为each后面跟了个function
jQuery扩展:
parsleyjs:http://parsleyjs.org/
Validate:http://jqueryvalidation.org/

插件:
bxslider:http://bxslider.com/
Bootstrap:http://www.bootcss.com/
Font Awesome:http://fontawesome.io/
jQuery EasyUI:http://www.jeasyui.com/download/index.php


响应式布局:能够根据用户设备的不同，来进行不同的布局
border-radius:50%;圆角
text-decoration:none

.header {
	margin:0 auto;
	background:red;
}
.container {  #使用container可以使内容到中间去
	width:998px;
	margin:0 auto;
}
<div class='header'>
	<div class='container'>header</div>
</div>
<div class='body'>
	<div class='container'>
		<p>swdsdsfd</p>
		<p>swdsdsfd</p>
		<p>swdsdsfd</p>
		<p>swdsdsfd</p>
		<p>swdsdsfd</p>
	</div>
</div>
<div class='footer'>footer</div>
伪类
a:hover :link(未被访问的) :visited(访问过的)
伪元素
:after,:before  适用于布局遇到float的情况时
把clearfix部署在公共的css里面，当遇到布局使用float的情况时就可以加上
<style>
	.clearfix:after {
		content:'.';
		visibility:hidden;  #隐藏内容，还在位置
		display:block;   #会出现隐藏的content那块背景色
		height:0;        #设置高度为0，就隐藏了那块背景色
		clear:both;
	}
</style>
<div style='background:red' class='clearfix'>
	<div style='float:left'>div1<br/>div3</div>
	<div style='float:left'>div2</div>
	原来的办法是<div style='clear:both'></div>,新办法如上
</div>
css箭头：
div {
	border:10px solid;
	border-left-color:transparent;   #透明
	border-right-color:green;
	border-top-color:transparent;
	border-bottom-color:transparent;
	display:inline-block;
}
MVC:Models(存放数据库)+Views(存放HTML文件)+Controllers(存放处理请求函数)=MVC
MTV:Models(存放数据库)+Templates(存放HTML文件)+Views(存放处理请求函数)=MTV
框架最外层一般都是wsgi，根据url来确定处理的函数叫做路由系统，将HTML渲染给用户的叫模板引擎，提供
数据的数据库叫模板绑定


